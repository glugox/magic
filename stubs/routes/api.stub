// Start of admin middleware group
$moduleApiMiddleware ??= (static function (): array {
    $configured = config('module.api.middleware');

    if (is_array($configured) && $configured !== []) {
        return array_values($configured);
    }

    if (config('auth.guards.sanctum')) {
        return ['web', 'auth:sanctum'];
    }

    $defaultGuard = config('auth.defaults.guard');
    $defaultDriver = $defaultGuard ? config('auth.guards.'.$defaultGuard.'.driver') : null;

    $middleware = [];

    if ($defaultDriver === 'session' || $defaultGuard === 'web') {
        $middleware[] = 'web';
    }

    if ($defaultGuard) {
        $middleware[] = 'auth:'.$defaultGuard;
    } else {
        $middleware[] = 'auth';
    }

    return array_values(array_unique($middleware));
})();

Route::middleware($moduleApiMiddleware)->group(function () {

    /**
     * {{entityName}} api routes
     */
    Route::apiResource('{{routeName}}', {{controllerClass}}::class)->names([
        'index' => 'api.{{routeName}}.index',
        'store' => 'api.{{routeName}}.store',
        'show' => 'api.{{routeName}}.show',
        'update' => 'api.{{routeName}}.update',
        'destroy' => 'api.{{routeName}}.destroy',
    ]);
    Route::get('{{routeName}}-search', [{{controllerClass}}::class, 'search'])->name('api.{{routeName}}.search');
    Route::get('{{routeName}}-options', [{{controllerClass}}::class, 'options'])->name('api.{{routeName}}.options');

    // Action route
    //Route::post('{{routeName}}/action', [{{controllerClass}}::class, 'action'])->name('api.{{routeName}}.action');

}); // End of admin middleware group
