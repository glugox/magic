<?php

namespace App\Http\Controllers\{{entitySingularName}};

use App\Http\Controllers\Controller;
use App\Services\TableQueryService;
use {{parentModelClassFull}};
use {{relatedModelClassFull}};
use App\Http\Resources\{{parentModelResourceClass}};
use App\Http\Resources\{{relatedModelResourceClass}};
use Illuminate\Http\Request;
use Inertia\Inertia;
use Glugox\ModelMeta\Requests\MetaRequest;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        protected TableQueryService $tableQueryService
    ){}

    public function index(MetaRequest $request, {{parentModelClass}} ${{parentModelClassLower}})
    {
        // Base query for related model
        $query = ${{parentModelClassLower}}->{{relationName}}()->getQuery();
        $searchableFields = $request->meta()->searchableFields();
        $relations = {{relationNamesCode}};
        $tableFields = $request->meta()->tableFields();

        // Apply table query (search, sort, filters)
        $relatedItems = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $tableFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey'),
            $request->get('sortDir')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
            'filters' => $this->tableQueryService->prepareFilters($request->all(), $tableFields),
        ]);
    }

    /**
     * Show the form for creating a new {{modelClass}}.
     */
     public function create(MetaRequest $request, {{parentModelClass}} ${{parentModelClassLower}})
     {
        // Base query for related model
        $query = ${{parentModelClassLower}}->{{relationName}}()->getQuery();
        $searchableFields = $request->meta()->searchableFields();
        $relations = {{relationNamesCode}};
        $tableFields = $request->meta()->tableFields();

        // Apply table query (search, sort, filters)
        $relatedItems = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $tableFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey'),
            $request->get('sortDir')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
            'filters' => $this->tableQueryService->prepareFilters($request->all(), $tableFields),
            'showCreateForm' => true
        ]);
     }

     /**
      * Store a newly created {{modelClass}} in storage.
      */
     public function store(MetaRequest $request, {{parentModelClass}} ${{parentModelClassLower}})
     {
        $data = $request->validated();

        // Create the related model instance for has-many relationship
        ${{parentModelClassLower}}->{{relationName}}()->create($data);
        ${{parentModelClassLower}}->save();

     }

     /**
      * Remove the specified {{modelClass}} from database.
      */
      public function destroy({{parentModelClass}} ${{parentModelClassLower}}, {{relatedModelClass}} ${{relatedModelClassLower}})
      {
          // Delete the related model instance
          ${{relatedModelClassLower}}->delete();

          return back()->with('success', '{{relatedModelClass}} deleted.');
      }

      /**
       * Bulk delete the specified {{modelClass}} from database.
       */
       public function bulkDestroy(Request $request, {{parentModelClass}} ${{parentModelClassLower}})
       {
            $data = $request->validate([
              'ids' => 'required|array',
              'ids.*' => 'exists:{{relatedTableName}},id'
            ]);

            // Bulk delete related model instances
            ${{parentModelClassLower}}->{{relationName}}()->whereIn('id', $data['ids'])->delete();

            return back()->with('success', '{{relatedModelClass}}s deleted.');
       }

}
