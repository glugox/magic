<?php

namespace App\Http\Controllers\{{entitySingularName}};

use App\Http\Controllers\Controller;
use App\Services\TableQueryService;
use {{parentModelClassFull}};
use {{relatedModelClassFull}};
use App\Http\Resources\{{parentModelResourceClass}};
use App\Http\Resources\{{relatedModelResourceClass}};
use Illuminate\Http\Request;
use Inertia\Inertia;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        protected TableQueryService $tableQueryService
    ){}

    public function index(Request $request, {{parentModelClass}} ${{parentModelClassLower}})
    {
        // Base query for related model
        $query = ${{parentModelClassLower}}->{{relationName}}()->getQuery();
        $searchableFields = {{searchableFieldsCode}};
        $relations = {{relationNamesCode}};
        $selectFields = {{tableFieldsNamesStr}};

        // Apply table query (search, sort, filters)
        $relatedItems = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $selectFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey', 'id'),
            $request->get('sortDir', 'asc')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
        ]);
    }

    /**
     * Show the form for creating a new {{modelClass}}.
     */
     public function create(Request $request, {{parentModelClass}} ${{parentModelClassLower}})
     {
        // Base query for related model
        $query = ${{parentModelClassLower}}->{{relationName}}()->getQuery();
        $searchableFields = {{searchableFieldsCode}};
        $relations = {{relationNamesCode}};
        $selectFields = {{tableFieldsNamesStr}};

        // Apply table query (search, sort, filters)
        $relatedItems = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $selectFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey', 'id'),
            $request->get('sortDir', 'asc')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
            'showCreateForm' => true
        ]);
     }

     /**
      * Store a newly created {{modelClass}} in storage.
      */
     public function store(Request $request, {{parentModelClass}} ${{parentModelClassLower}})
     {
        $data = $request->validate({{rulesArrayStrCreate}});

        // Create the related model instance for has-many relationship
        ${{parentModelClassLower}}->{{relationName}}()->create($data);
        ${{parentModelClassLower}}->save();

     }
}
