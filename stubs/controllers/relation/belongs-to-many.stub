<?php

namespace App\Http\Controllers\{{entitySingularName}};

{{controllerBaseImport}}
use Glugox\TableQuery\Services\TableQueryService;
use {{parentModelClassFull}};
use {{relatedModelClassFull}};
use App\Http\Resources\{{relatedModelResourceClass}};
use App\Http\Resources\{{parentModelResourceClass}};
use Illuminate\Http\Request;
use Inertia\Inertia;
use Glugox\ModelMeta\Requests\MetaRequest;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends {{controllerBaseClass}}
{
    /**
     * Show the list of {{relationName}} for the given {{parentModelClassLower}}.
     */
    public function index(MetaRequest $request, {{parentModelClass}} ${{parentModelClassLower}})
    {
        $tableQueryService = TableQueryService::forModel({{relatedModelClass}}::class);
        ${{parentModelClassLower}}->load('{{relationName}}');
        $selectedIds = ${{parentModelClassLower}}->{{relationName}}->pluck('id')->toArray();
        $tableQueryService->setSelectedIds($selectedIds);

        $query = {{relatedModelClass}}::query();

        // Apply table query (search, sort, filters)
        $relatedItems = $tableQueryService->applyAll(
            $query,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey'),
            $request->get('sortDir')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
            'state' => $tableQueryService->prepareState(),
        ]);
    }

        /**
         * Update the selection of {{relationName}} for the {{parentModelClassLower}}.
         */
        public function updateSelection(MetaRequest $request, {{parentModelClass}} ${{parentModelClassLower}})
        {
            $validated = $request->validate([
                'added'   => 'array',
                'added.*' => 'integer|exists:{{relationName}},id',
                'removed'   => 'array',
                'removed.*' => 'integer|exists:{{relationName}},id',
            ]);

            if (!empty($validated['added'])) {
                ${{parentModelClassLower}}->{{relationName}}()->attach($validated['added']);
            }

            if (!empty($validated['removed'])) {
                ${{parentModelClassLower}}->{{relationName}}()->detach($validated['removed']);
            }

            $selectedIds = ${{parentModelClassLower}}->{{relationName}}()->pluck('id')->sort()->values()->toArray();

            return response()->json([
                'selectedIds' => $selectedIds,
                'message' => '{{relationName}} updated successfully',
            ]);
        }
}
