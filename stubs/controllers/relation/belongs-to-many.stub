<?php

namespace App\Http\Controllers\{{entitySingularName}};

use App\Http\Controllers\Controller;
use App\Services\TableQueryService;
use {{parentModelClassFull}};
use {{relatedModelClassFull}};
use App\Http\Resources\{{relatedModelCollectionClass}};
use App\Http\Resources\{{relatedModelResourceClass}};
use App\Http\Resources\{{parentModelResourceClass}};
use Illuminate\Http\Request;
use Inertia\Inertia;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Constructor
     */
     public function __construct(
        protected TableQueryService $tableQueryService
     ){}

    /**
     * Show the list of {{relationName}} for the given {{parentModelClassLower}}.
     */
    public function index({{parentModelClass}} ${{parentModelClassLower}})
    {
        $request = request();

        ${{parentModelClassLower}}->load('{{relationName}}');
        $selectedIds = ${{parentModelClassLower}}->{{relationName}}->pluck('id')->toArray();

        $query = {{relatedModelClass}}::query();
        $searchableFields = {{searchableFieldsCode}};
        $relations = {{relationNamesCode}};
        $selectFields = {{tableFieldsNamesStr}};

        // Apply table query (search, sort, filters)
        $relatedItems = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $selectFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey', 'id'),
            $request->get('sortDir', 'asc')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
            'item_{{relationName}}_ids' => $selectedIds,
        ]);
    }

    /**
         * Update the selection of {{relationName}} for the {{parentModelClassLower}}.
         */
        public function updateSelection(Request $request, {{parentModelClass}} ${{parentModelClassLower}})
        {
            $validated = $request->validate([
                'added'   => 'array',
                'added.*' => 'integer|exists:{{relationName}},id',
                'removed'   => 'array',
                'removed.*' => 'integer|exists:{{relationName}},id',
            ]);

            if (!empty($validated['added'])) {
                ${{parentModelClassLower}}->{{relationName}}()->attach($validated['added']);
            }

            if (!empty($validated['removed'])) {
                ${{parentModelClassLower}}->{{relationName}}()->detach($validated['removed']);
            }

            $selectedIds = ${{parentModelClassLower}}->{{relationName}}()->pluck('id')->sort()->values()->toArray();

            return response()->json([
                'selectedIds' => $selectedIds,
                'message' => '{{relationName}} updated successfully',
            ]);
        }
}
