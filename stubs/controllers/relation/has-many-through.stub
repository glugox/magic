<?php

namespace App\Http\Controllers\{{entitySingularName}};

use App\Http\Controllers\Controller;
use App\Services\TableQueryService;
use {{parentModelClassFull}};
use {{relatedModelClassFull}};
use App\Http\Resources\{{parentModelResourceClass}};
use App\Http\Resources\{{relatedModelResourceClass}};
use Illuminate\Http\Request;
use Inertia\Inertia;
use Glugox\ModelMeta\Requests\MetaRequest;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        protected TableQueryService $tableQueryService
    ){}

    public function index(MetaRequest $request, {{parentModelClass}} ${{parentModelClassLower}})
    {
        // Load parent relation
        ${{parentModelClassLower}}->load('{{relationName}}');

        // Base query for related model
        $query = ${{parentModelClassLower}}->{{relationName}}()->getQuery();
        $searchableFields = $request->meta()->searchableFields();
        $relations = {{relationNamesCode}};
        $tableFields = $request->meta()->tableFields();

        // Apply table query (search, sort, filters)
        $relatedItems = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $tableFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey', 'id'),
            $request->get('sortDir', 'asc')
        )->paginate();

        return Inertia::render('{{parentModelFolderName}}/{{relationName}}/Index', [
            'item' => new {{parentModelResourceClass}}(${{parentModelClassLower}}),
            '{{relationName}}' => {{relatedModelResourceClass}}::collection($relatedItems)->response()->getData(),
            'filters' => $this->tableQueryService->prepareFilters($request->all(), $tableFields),
        ]);
    }
}
