<?php

namespace App\Http\Controllers;

use {{modelClassFull}};
use Glugox\TableQuery\Services\TableQueryService;
use App\Http\Resources\{{modelClass}}Resource;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Glugox\ModelMeta\Requests\MetaRequest;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{

    /**
     * Show the {{modelClass}} index page.
     */
    public function index(MetaRequest $request)
    {
        $query = {{modelClass}}::query();
        $tableQueryService = TableQueryService::forModel({{modelClass}}::class);

         // Apply table query (search, sort, filters)
         $items = $tableQueryService->applyAll(
             $query,
             $request->get('{{searchQueryString}}', ''),
             $request->get('sortKey'),
             $request->get('sortDir')
         )->paginate();

        return Inertia::render('{{folderName}}/Index', [
            'filters' => $tableQueryService->prepareFilters($request->all()),
            'data' => {{resourceClass}}::collection($items)->response()->getData(),
        ]);
    }

    /**
     * Show the form for creating a new {{modelClass}}.
     */
    public function create()
    {
        return Inertia::render('{{folderName}}/Create');
    }

    /**
     * Store a newly created {{modelClass}} in database.
     */
    public function store(MetaRequest $request)
    {
        $data = $request->validated();
        $item = {{modelClass}}::create($data);

        return redirect()->route(strtolower('{{routeName}}') . '.index')
            ->with('success', '{{modelClass}} created successfully.');
    }

    /**
     * Display the specified {{modelClass}}.
     */
    public function show(MetaRequest $request, {{modelClass}} ${{modelClassCamel}})
    {

        ${{modelClassCamel}}->load($request->meta()->relationsNames());

        return Inertia::render('{{folderName}}/Edit', [
            'item' => new {{modelClass}}Resource(${{modelClassCamel}}),
        ]);
    }

    /**
     * Show the form for editing the specified {{modelClass}}.
     */
    public function edit(MetaRequest $request, {{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->load($request->meta()->relationsNames());

        return Inertia::render('{{folderName}}/Edit', [
            'item' => new {{modelClass}}Resource(${{modelClassCamel}}),
        ]);
    }

    /**
     * Update the specified {{modelClass}} in database.
     */
    public function update(MetaRequest $request, {{modelClass}} ${{modelClassCamel}})
    {
        $data = $request->validated();
        ${{modelClassCamel}}->update($data);

        return redirect()->back()
            ->with('success', '{{modelClass}} updated successfully.');
    }

    /**
     * Remove the specified {{modelClass}} from database.
     */
    public function destroy({{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->delete();

        return redirect()->route(strtolower('{{routeName}}') . '.index')
            ->with('success', '{{modelClass}} deleted successfully.');
    }

    /**
     * Remove multiple {{modelClass}} from database.
     */
    public function bulkDestroy(Request $request)
    {
        $ids = $request->validate([
            'ids' => 'required|array',
            'ids.*' => 'exists:{{tableName}},id',
        ])['ids'];

        {{modelClass}}::whereIn('id', $ids)->delete();

        return back()->with('success', 'Selected {{modelClassPlural}} deleted successfully.');
    }


}
