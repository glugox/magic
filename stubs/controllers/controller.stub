<?php

namespace App\Http\Controllers;

use {{modelClassFull}};
use App\Services\TableQueryService;
use App\Http\Resources\{{modelClass}}Resource;
use App\Http\Resources\{{modelClass}}Collection;
use Illuminate\Http\Request;
use Inertia\Inertia;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        protected TableQueryService $tableQueryService
    ){}

    /**
     * Show the {{modelClass}} index page.
     */
    public function index()
    {
        $request = request();

        $query = {{modelClass}}::query();
        $searchableFields = {{searchableFieldsCode}};
        $relations = {{relationNamesCode}};
        $selectFields = {{tableFieldsNamesStr}};

         // Apply table query (search, sort, filters)
         $items = $this->tableQueryService->applyAll(
             $query,
             $searchableFields,
             $relations,
             $selectFields,
             $request->get('{{searchQueryString}}', ''),
             $request->get('sortKey', 'id'),
             $request->get('sortDir', 'asc')
         )->paginate();

        return Inertia::render('{{folderName}}/Index', [
            'filters' => request()->only(['search', 'sortKey', 'sortDir']),
            'data' => {{resourceClass}}::collection($items)->response()->getData(),
        ]);
    }

    public function create()
    {
        return Inertia::render('{{folderName}}/Create');
    }

    public function store(Request $request)
    {
        $data = $request->validate({{rulesArrayStrCreate}});
        $item = {{modelClass}}::create($data);

        return redirect()->route(strtolower('{{routeName}}') . '.index')
            ->with('success', '{{modelClass}} created successfully.');
    }

    public function show({{modelClass}} ${{modelClassCamel}})
    {
        $relations = {{relationNamesCode}};
        ${{modelClassCamel}}->load($relations);

        return Inertia::render('{{folderName}}/Edit', [
            'item' => new {{modelClass}}Resource(${{modelClassCamel}}),
        ]);
    }

    public function edit({{modelClass}} ${{modelClassCamel}})
    {
        $relations = {{relationNamesCode}};
        ${{modelClassCamel}}->load($relations);

        return Inertia::render('{{folderName}}/Edit', [
            'item' => new {{modelClass}}Resource(${{modelClassCamel}}),
        ]);
    }

    public function update(Request $request, {{modelClass}} ${{modelClassCamel}})
    {
        $data = $request->validate({{rulesArrayStrUpdate}});
        ${{modelClassCamel}}->update($data);

        return redirect()->route(strtolower('{{routeName}}') . '.index')
            ->with('success', '{{modelClass}} updated successfully.');
    }

    public function destroy({{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->delete();

        return redirect()->route(strtolower('{{routeName}}') . '.index')
            ->with('success', '{{modelClass}} deleted successfully.');
    }
}
