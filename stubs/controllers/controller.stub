<?php

namespace App\Http\Controllers;

use {{modelClassFull}};
use Illuminate\Http\Request;
use Inertia\Inertia;

class {{controllerClass}} extends Controller
{
    /**
     * Show the {{modelClass}} index page.
     */
    public function index()
    {
        $request = request();

        // All relation names for eager loading
        $relations = {{relationNamesCode}};

        // If the entity has searchable fields, we can use them for searching
        $searchableFields = {{searchableFieldsCode}};
        // Table fields to select
        $queryFields = {{tableFieldsNamesStr}};

        $query = count($relations) > 0
            ? {{modelClass}}::with($relations)
            : {{modelClass}}::query();

        // Only specific fields
        if (count($queryFields) > 0) {
            $query->select($queryFields);
        }

        // Sorting ( sortKey / sortDir )
        $sortKey = $request->get('sortKey', 'id');
        $sortDir = $request->get('sortDir', 'asc');
        if ($sortKey && $sortDir) {
            $query->orderBy($sortKey, $sortDir);
        } else {
            $query->orderBy('id', 'asc'); // Default sorting
        }

        // Search
        $search = $request->get('search');
        if ($search && count($searchableFields) > 0) {
            $query->where(function ($q) use ($search, $searchableFields) {
                foreach ($searchableFields as $field) {
                    $q->orWhere($field, 'like', "%{$search}%");
                }
            });
        }
        $items = $query->paginate(
            $request->integer('per_page', 12),
            ['*'],
            'page',
            $request->integer('page', 1)
        );

        return Inertia::render('{{vuePage}}/Index', [
            'filters' => request()->only(['search', 'sortKey', 'sortDir']),
            'data' => $items,
        ]);
    }

    public function create()
    {
        return Inertia::render('{{vuePage}}/Create');
    }

    public function store(Request $request)
    {
        $data = $request->validate({{rulesArrayStrCreate}});

        {{modelClass}}::create($data);

        return redirect()->route(strtolower('{{vuePage}}') . '.index')
            ->with('success', '{{vuePage}} created successfully.');
    }

    public function show({{modelClass}} ${{modelClassCamel}})
    {
        $relations = {{relationNamesCode}};
        ${{modelClassCamel}}->load($relations);

        return Inertia::render('{{vuePage}}/Edit', [
            'item' => ${{modelClassCamel}},
        ]);
    }

    public function edit({{modelClass}} ${{modelClassCamel}})
    {
        $relations = {{relationNamesCode}};
        ${{modelClassCamel}}->load($relations);

        return Inertia::render('{{vuePage}}/Edit', [
            'item' => ${{modelClassCamel}},
        ]);
    }

    public function update(Request $request, {{modelClass}} ${{modelClassCamel}})
    {
        $data = $request->validate({{rulesArrayStrUpdate}});

        ${{modelClassCamel}}->update($data);

        return redirect()->route(strtolower('{{vuePage}}') . '.index')
            ->with('success', '{{vuePage}} updated successfully.');
    }

    public function destroy({{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->delete();

        return redirect()->route(strtolower('{{vuePage}}') . '.index')
            ->with('success', '{{vuePage}} deleted successfully.');
    }
}
