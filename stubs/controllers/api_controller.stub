<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use {{ modelClassFull }};
use {{ resourceClassFull }};
use {{ collectionClassFull }};
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

class {{ controllerClass }} extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $query = {{ modelClass }}::query();

        // Optionally search by searchable fields
        if (!empty({{ searchableFieldsCode }})) {
            if ($request->has('q')) {
                $q = $request->input('q');
                $query->where(function ($query) use ($q) {
                    foreach ({{ searchableFieldsCode }} as $field) {
                        $query->orWhere($field, 'like', "%$q%");
                    }
                });
            }
        }

        $items = $query->select({{ selectableFieldsArrayCode }})->paginate(15);

        return new {{ collectionClass }}($items);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate({{ rulesArrayStrCreate }});

        $item = {{ modelClass }}::create($validated);

        return new {{ resourceClass }}($item);
    }

    /**
     * Display the specified resource.
     */
    public function show({{ modelClass }} ${{ modelClassCamel }})
    {
        return new {{ resourceClass }}(${{ modelClassCamel }});
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, {{ modelClass }} ${{ modelClassCamel }})
    {
        $validated = $request->validate({{ rulesArrayStrUpdate }});

        ${{ modelClassCamel }}->update($validated);

        return new {{ resourceClass }}(${{ modelClassCamel }});
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ modelClass }} ${{ modelClassCamel }})
    {
        ${{ modelClassCamel }}->delete();

        return response()->json(null, 204);
    }

    /**
     * Search endpoint (optional)
     */
    public function search(Request $request)
    {
        $query = {{ modelClass }}::query();

        if (!empty({{ searchableFieldsCode }})) {
            if ($request->has('q')) {
                $q = $request->input('q');
                $query->where(function ($query) use ($q) {
                    foreach ({{ searchableFieldsCode }} as $field) {
                        $query->orWhere($field, 'like', "%$q%");
                    }
                });
            }
        }

        $items = $query->select({{ selectableFieldsArrayCode }})->get();

        return {{ resourceClass }}::collection($items);
    }

    /**
     * Options endpoint for select dropdowns
     */
    public function options()
    {
        $items = {{ modelClass }}::select({{ selectableFieldsArrayCode }})->get();

        return {{ resourceClass }}::collection($items);
    }
}
