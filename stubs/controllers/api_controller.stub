<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Glugox\TableQuery\Services\TableQueryService;
use {{modelClassFull}};
use {{resourceClassFull}};
use Glugox\ModelMeta\Requests\MetaRequest;
use Illuminate\Http\Request;
use App\Http\Responses\ApiResponse;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(MetaRequest $request)
    {
        $query = {{modelClass}}::query();
        $tableQueryService = TableQueryService::forModel({{modelClass}}::class);

        // Apply table query (search, sort, filters)
        $items = $tableQueryService->applyAll(
            $query,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey'),
            $request->get('sortDir')
        )->paginate();

        return ApiResponse::success(
            content: {{resourceClass}}::collection($items)->response()->getData(),
            meta: [
                'total' => $items->total(),
                'per_page' => $items->perPage(),
                'current_page' => $items->currentPage(),
            ],
            message: '{{modelClassPlural}} retrieved successfully.'
        );
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(MetaRequest $request)
    {
        $item = {{modelClass}}::create($request->validated());

        return ApiResponse::success(
            content: new {{resourceClass}}($item),
            message: '{{modelClass}} created successfully.'
        );
    }

    /**
     * Display the specified resource.
     */
    public function show(MetaRequest $request, {{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->load($request->meta()->relationsNames());

        return ApiResponse::success(
            content: new {{resourceClass}}(${{modelClassCamel}}),
            message: '{{modelClass}} retrieved successfully.'
        );
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(MetaRequest $request, {{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->update($request->validated());

        return ApiResponse::success(
            content: new {{resourceClass}}(${{modelClassCamel}}),
            message: '{{modelClass}} updated successfully.'
        );
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelClass}} ${{modelClassCamel}})
    {
        $id = ${{modelClassCamel}}->id;
        ${{modelClassCamel}}->delete();

        return ApiResponse::success(
            content: null,
            message: "{{modelClass}} with ID $id deleted successfully.",
            meta: ['deleted_id' => $id]
        );
    }
}
