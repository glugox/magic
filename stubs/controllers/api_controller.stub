<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Services\TableQueryService;
use {{modelClassFull}};
use {{resourceClassFull}};
use {{collectionClassFull}};
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

/**
 * {{classDescription}}
 */
class {{controllerClass}} extends Controller
{
    /**
     * Constructor
     */
     public function __construct(
        protected TableQueryService $tableQueryService
     ){}

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $query = {{modelClass}}::query();

        // Apply search (if needed)
        $searchableFields = {{searchableFieldsCode}};
        $relations = {{relationNamesCode}};
        $selectFields = {{tableFieldsNamesStr}};

         // Apply table query (search, sort, filters)
         $items = $this->tableQueryService->applyAll(
            $query,
            $searchableFields,
            $relations,
            $selectFields,
            $request->get('{{searchQueryString}}', ''),
            $request->get('sortKey', 'id'),
            $request->get('sortDir', 'asc')
         )->paginate();

        return new {{collectionClass}}($items);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate({{rulesArrayStrCreate}});

        $item = {{modelClass}}::create($validated);

        return new {{resourceClass}}($item);
    }

    /**
     * Display the specified resource.
     */
    public function show({{modelClass}} ${{modelClassCamel}})
    {
        return new {{resourceClass}}(${{modelClassCamel}});
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, {{modelClass}} ${{modelClassCamel}})
    {
        $validated = $request->validate({{rulesArrayStrUpdate}});

        ${{modelClassCamel}}->update($validated);

        return new {{resourceClass}}(${{modelClassCamel}});
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelClass}} ${{modelClassCamel}})
    {
        ${{modelClassCamel}}->delete();

        return response()->json(null, 204);
    }

    /**
     * Search endpoint (optional)
     */
    public function search(Request $request)
    {
        $query = {{modelClass}}::query();
        $searchableFields = {{searchableFieldsCode}};

        // Apply search
        $query = $this->searchService->applySearch(
            $query,
            $request->get('{{searchQueryString}}'),
            $searchableFields
        );

        $items = $query->select({{tableFieldsNamesStr}})->get();

        return {{resourceClass}}::collection($items);
    }

    /**
     * Options endpoint for select dropdowns
     */
    public function options()
    {
        $items = {{modelClass}}::select({{tableFieldsNamesStr}})->get();

        return {{resourceClass}}::collection($items);
    }
}
